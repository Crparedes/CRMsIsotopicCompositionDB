read.serialConnection(con)
read.serialConnection(con)
summary(con)
write.serialConnection(con, dat = '999!\n')
summary(con)
summary(con)
summary(con)
summary(con)
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,2", translation = 'binary')
print(con)
summary(con)
open(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,2",
newline = TRUE,
translation = 'binary')
print(con)
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
read.serialConnection(con)
summary(con)
write.serialConnection(con, dat = '999!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,2",
newline = TRUE, eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
#
write.serialConnection(con, dat = '999!\n')
summary(con)
read.serialConnection(con)
write.serialConnection(con, dat = 'QIT!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n')
summary(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '112!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
read.serialConnection(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n') # No funciona!
summary(con)
read.serialConnection(con)
# End calibration:
write.serialConnection(con, dat = 'QIT!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
str(read.serialConnection(con))
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
class(read.serialConnection(con))
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
as.numeric(read.serialConnection(con))
as.character(read.serialConnection(con))
write.serialConnection(con, dat = '999!\n')
summary(con)
as.character(read.serialConnection(con))
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1",
newline = TRUE, eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1",
newline = FALSE, eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1",
newline = FALSE, #eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = FALSE, #eof = '\n',
translation = 'binary')
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
read.serialConnection(con)
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'full',
newline = FALSE, #eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = FALSE, #eof = '\n',
translation = 'lf')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n') # No funciona!
summary(con)
read.serialConnection(con)
# End calibration:
write.serialConnection(con, dat = 'QIT!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
as.numeric(read.serialConnection(con))
write.serialConnection(con, dat = '999!\n')
summary(con)
as.character(read.serialConnection(con))
# Start calibration:
write.serialConnection(con, dat = 'CLR\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = FALSE, #eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = c(55, 55, 55))
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = c(55, 55, 55))
summary(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 0, #eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = c(55, 55, 55))
summary(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 0, eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n') # No funciona!
read.serialConnection(con)
read.serialConnection(con)
# End calibration:
write.serialConnection(con, dat = 'QIT!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
as.numeric(read.serialConnection(con))
read.serialConnection(con)
write.serialConnection(con, dat = '999!\n')
summary(con)
as.character(read.serialConnection(con))
close(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 0, eof = '\n',
translation = 'binary')
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
open(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 0, eof = '\n', handshake = 'rtscts',
translation = 'binary')
summary(con)
open(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
library(serial)
listPorts()
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 0, eof = '\n', handshake = 'xonxoff',#'rtscts',
translation = 'binary')
summary(con)
open(con)
# read.serialConnection(con)
summary(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
library(serial)
listPorts()
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 1, eof = '\n', handshake = 'xonxoff',#'rtscts',
translation = 'binary')
summary(con)
open(con)
# read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
read.serialConnection(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200, n, 8, 1", buffering = 'line',
newline = 1, eof = '\n', handshake = 'xonxoff',#'rtscts',
translation = 'binary')
summary(con)
con <- serialConnection(name = 'Isfet_RD', port = 'COM5', mode = "115200,n,8,1", buffering = 'line',
newline = 1, eof = '\n', handshake = 'xonxoff',#'rtscts',
translation = 'binary')
summary(con)
open(con)
# Start calibration:
write.serialConnection(con, dat = 'CLR!\n')
summary(con)
read.serialConnection(con)
# Calibration pH 7
write.serialConnection(con, dat = '113!\n') # No funciona!
summary(con)
read.serialConnection(con)
# End calibration:
write.serialConnection(con, dat = 'QIT!\n')
summary(con)
read.serialConnection(con)
# Retrieve pH signal
write.serialConnection(con, dat = '999!\n')
summary(con)
read.serialConnection(con)
close(con)
read.serialConnection(con)
open(con)
close(con)
listPorts()
(2-3*2.9)/(1-3*2.9)
(3*2.9-1)/(3*2.9+1)
library(metRology)
GUM(var.name = 'R', x.i = 2.9, u.i = 0.1, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')
GUM(var.name = 'R', x.i = 2.9, u.i = 0.1, nu.i = 200, measurement.fnc = '(3 * R - 1)/(3 * R + 1)')
curve(C_A316.A312, from = - 1, to = 1, col = 2)
C_A316.A312 <- function(x) 6 / (3 * x + 1)^2
C_A314.A312 <- function(x) 3 / (1 - 3 * x)^2
curve(C_A316.A312, from = - 1, to = 1, col = 2)
curve(C_A314.A312, from = - 1, to = 1, col = 3, add = TRUE)
curve(C_A316.A312, from = 0, to = 1, col = 2)
curve(C_A314.A312, from = 0, to = 1, col = 3, add = TRUE)
C_A316.A312(2.9)
C_A314.A312(2.9)
curve(C_A316.A312, from = 0, to = 5, col = 2)
curve(C_A314.A312, from = 0, to = 5, col = 3, add = TRUE)
curve(C_A316.A312, from = 1, to = 5, col = 2)
curve(C_A314.A312, from = 1, to = 5, col = 3, add = TRUE)
(18+12*sqrt(2))/18
curve(C_A316.A312, from = 1, to = 5, col = 2, xlab = 'Relative abundance ratio', ylab = 'Sensibility coefficient')
x <- seq(1, 4, 0.01)
data_fun <- data.frame(x = x, values = c(C_A316.A312(x), C_A314.A312(x)),
Ratio = rep(c("A316.A312", "C_A314.A312", "fun3"), each = length(x)))
library("ggplot2")
x
data_fun <- data.frame(x = x, values = c(C_A316.A312(x), C_A314.A312(x)),
Ratio = rep(c("A316.A312", "C_A314.A312"), each = length(x)))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line()
datRatio <- data.frame(x = x, values = c(C_A316.A312(x), C_A314.A312(x)),
Ratio = rep(c("A316.A312", "C_A314.A312"), each = length(x)))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line()
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for A'~(^81)))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for A'~(A^81)))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for '~A^81))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for '~A^81Br))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for '~A^81'Br'))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(bquote('Sensibility coefficient for '~A^81,'Br'))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A^81, 'Br')))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[''^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[(''^81, 'Br')])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[''^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[~^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[''^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81, 'Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br'])))
datRatio <- data.frame(x = x, values = c(C_A316.A312(x), C_A314.A312(x)),
Ratio = rep(c("A316/A312", "A314/A312"), each = length(x)))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br'])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(breaks = levels(datRatio$Ratio),
labels=c(expression(A[314]/A[312]), expression(c[1])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_manual(breaks = levels(datRatio$Ratio),
labels=c(expression(A[314]/A[312]), expression(c[1])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_manual(labels=c(expression(A[314]/A[312]), expression(c[1])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(c[1])))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), A[316]/A[312]))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312])))
GUM(var.name = 'R', x.i = 2.9, u.i = 0.1, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')
GUM(var.name = 'R', x.i = 2.9, u.i = 0.1, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')$sensitivities
GUM(var.name = 'R', x.i = 2.9, u.i = 0.1, nu.i = 200, measurement.fnc = '(3 * R - 1)/(3 * R + 1)')$sensitivities
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')$sensitivities
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(3 * R - 1)/(3 * R + 1)')$sensitivities
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(3 * R - 1)/(3 * R + 1)')$sensitivities /
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')$sensitivities
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(2 - 3 * R)/(1 - 3 * R)')$sensitivities /
GUM(var.name = 'R', x.i = 2.9, u.i = 0.3, nu.i = 200, measurement.fnc = '(3 * R - 1)/(3 * R + 1)')$sensitivities
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45")) +
curve(C_A316.A312, from = 1, to = 5, col = 2, xlab = 'Relative abundance ratio', ylab = 'Sensibility coefficient')
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45")) +
curve(C_A316.A312, from = 1, to = 5, col = 2, xlab = 'Relative abundance ratio', ylab = 'Sensibility coefficient')
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() + coord_cartesian(ylim = c(0, 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
(18+12*sqrt(2))/18
C_A316.A312(2.9)
C_A314.A312(2.9)
C_A316.A312(2.9) / C_A316.A312(2.9)
C_A316.A312(2.9) / C_A314.A312(2.9)
(C_A316.A312(2.9) - C_A314.A312(2.9)) / C_A314.A312(2.9) * 100
p1<- ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Relative abundance ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() + coord_cartesian(ylim = c(0, 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
get_wd()
setwd("~/0-INM.V2/2023")
pdf('plot.pdf', width = 4, height = 3)
print(p1)
dev.off()
datRatio <- data.frame(x = x, values = c(C_A316.A312(x), C_A314.A312(x)),
Ratio = rep(c("A316/A312", "A314/A312"), each = length(x)))
p1<- ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Peak area ratio') + ylab(expression(paste("Sensibility coefficient for ", A[' '^81]['Br']))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() + coord_cartesian(ylim = c(0, 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
pdf('plot.pdf', width = 5, height = 3)
print(p1)
dev.off()
pdf('plot.pdf', width = 6, height = 2.8)
print(p1)
dev.off()
p1<- ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Peak area ratio') + ylab(expression(paste("Sensibility coefficient for x(", ''^81, 'Br'))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() + coord_cartesian(ylim = c(0, 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
print(p1)
p1<- ggplot(datRatio, aes(x, values, col = Ratio)) + geom_line() +
xlab('Peak area ratio') + ylab(expression(paste("Sensibility coefficient for ", italic(x), "(", ' '^81, 'Br)'))) +
scale_color_discrete(labels = c(expression(A[314]/A[312]), expression(A[316]/A[312]))) +
theme_bw() + coord_cartesian(ylim = c(0, 0.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.y = element_text(color = "gray45"))
print(p1)
pdf('plot.pdf', width = 6, height = 2.8)
print(p1)
dev.off()
shiny::runApp('~/CRMsIsotopicCompositionDB')
# library(odbc)
# library(RMySQL)
# library(googlesheets4)
library(readxl)
setwd("~/CRMsIsotopicCompositionDB")
runApp()
runApp()
runApp()
