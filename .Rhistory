geom_hline(aes(yintercept = qt(0.99, 9, FALSE)), size = 0.35, linetype = "dashed", color = '#164952') +
geom_hline(aes(yintercept = qt(0.95, 9, FALSE)), size = 0.35, linetype = "dashed", color = '#164952') +
annotate("text", x = 0.65, y = 13.5,
label = expression(paste(H[0], ": No existe correlaci√≥n entre X y Y")), size = 3.5) +
annotate("text", x = 0.605, y = qt(0.9999, 9, FALSE) + 0.3, label = "Niveles de confianza 99.99 %", size = 3) +
annotate("text", x = 0.526, y = qt(0.999, 9, FALSE) + 0.3, label = "99.9 %", size = 3) +
annotate("text", x = 0.518, y = qt(0.99, 9, FALSE) + 0.3, label = "99 %", size = 3) +
annotate("text", x = 0.518, y = qt(0.95, 9, FALSE) + 0.3, label = "95 %", size = 3)
# geom_segment(aes(x = 1.627, y = -1, xend = 1.627, yend = 0.285), size = 0.3, linetype = "dotted") +
# geom_segment(aes(x = 1.48, y = -1, xend = 1.48, yend = 0.285), size = 0.3, linetype = "dotted")  +
# geom_segment(aes(x = 1.55, y = -1, xend = 1.55, yend = 0.285), size = 0.3, linetype = "dashed") +
# geom_segment(aes(x = 1.48, y = 0, xend = 1.627, yend = 0), size = 0.3,
#              arrow = arrow(ends = 'both', length = unit(x = 7, units = 'pt')))
)
savepdf(RechT, name = 'VariacionValorTcontraR', h = 4, w = 6)
runApp('~/CRMsIsotopicCompositionDB')
CIAAW_NatIsotAbunTable[which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())), ]
CIAAW_NatIsotAbunTable[which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())), c('Isotope')]
CIAAW_NatIsotAbunTable[which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())), c('Isotope', "Relative.abundance")]
CIAAW_NatIsotAbunTable[
which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())),
c("Interval")]
CIAAW_NatIsotAbunTable[
which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())),
c("Interval")][1]
CIAAW_NatIsotAbunTable[
which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())),
c("Interval")][1]
CIAAW_NatIsotAbunTable[
which(CIAAW_NatIsotAbunTable$Element == tolower(SelectedElem())),
c("Isotope", "Relative.abundance", "Notes", "Interval")]
CIAAW_NatIsotAbunFtnts
CIAAW_NatIsotAbunFtnts$Note
Notes <- isotopes()$Notes[1]
Notes
isotopes()
split('g, g')
split('g, g', '')
split('g, g', ' ')
str_split('g, g', ' ')
library(stringr)
str_split('g, g', ' ')
split('g g', ' ')
strsplit('g g', ' ')
strsplit('g g', ' ')[[1]]
CIAAW_NatIsotAbunFtnts
CIAAW_NatIsotAbunFtnts[strsplit('g g', ' ')[[1]]]
CIAAW_NatIsotAbunFtnts[, strsplit('g g', ' ')[[1]]]
strsplit('g g', ' ')[[1]]
strsplit('g g', ' ')[[1]] -> x
CIAAW_NatIsotAbunFtnts[, x]
CIAAW_NatIsotAbunFtnts[CIAAW_NatIsotAbunFtnts$Note == x, ]
CIAAW_NatIsotAbunFtnts[CIAAW_NatIsotAbunFtnts$Note == 'as', ]
CIAAW_NatIsotAbunFtnts[CIAAW_NatIsotAbunFtnts$Note == x, 2]
isotopes()$Notes
isotopes()$Notes[1]
Notes <- CIAAW_NatIsotAbunFtnts[CIAAW_NatIsotAbunFtnts$Note == strsplit(isotopes()$Notes[1], ' ')[[1]], 2]
Notes
runApp()
runApp('~/CRMsIsotopicCompositionDB')
setwd("~/CRMsIsotopicCompositionDB")
INITI_IsoComCRM_Info <- read.csv(file ='www/IsotopicData/RAW_0_IsoComCRM_Info.csv')
INITI_IsoComCRM_DataIR <- read.csv(file ='www/IsotopicData/RAW_0_IsoComCRM_DataIR.csv')
INITI_IsoComCRM_DataAbundances <- read.csv(file ='www/IsotopicData/RAW_0_IsoComCRM_DataAbundances.csv')
INITI_IsoComCRM_Info
shiny::runApp()
niceSeparator()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
55 % 2
55 %% 2
shiny::runApp()
runApp()
runApp()
input$AcLnk_IsoComCRM %% 2
input$AcLnk_IsoComCRM %% 2 == 0
input$AcLnk_IsoComCRM %% 2 == 1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
MatrixCRM
MatrixCRM()
SelectedElem()
INITI_MatrixCRM_Info$Elements == tolower(SelectedElem())
INITI_MatrixCRM_Info$Elements
grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = TRUE)
grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE)
INITI_IsoCompCRM_Info[which(INITI_IsoCompCRM_Info$Elements == tolower(SelectedElem())),
c("CRM.name", "Lot", "Producer", "Description")]
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
runApp()
runApp()
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
ListMatrixCRM()
runApp()
runApp()
runApp()
input$`SRM_982_December 2004`
input$`SelectedIsoCompCRM`
input$SelectedElement
input$SelectedElement
input$SelectedIsoCompCRM
input$`SRM_981_March 1991`
input$`SRM_981_March 1991`
input$SelectedIsoCompCRM
input$SelectedIsoCompCRM
runApp()
input$SelectedIsoCompCRM
IsoCompCRM()
IsoCompCRM()
IsoCompCRM <- IsoCompCRM()
IsoCompCRM
INITI_IsoCompCRM_Info
library(data.table)
runApp('www/TestApp.R')
copy
# library(dplyr)
library(data.table)
mtcars
copy(mtcars)
DT <- copy(mtcars)
setDT(DT)
DT
runApp('www/TestApp.R')
runApp()
runApp()
runApp()
runApp()
IsoCompCRM()
DT <- copy(IsoCompCRM())
setDT(DT)
seq_len(.N)
mtcars
runApp()
runApp()
runApp()
IsoCompCRM()
DT <- copy(IsoCompCRM())
setDT(DT)
DT[, inputId := paste0("CRM.ID_input_", seq_len(.N))][
, CRM.ID_links := as.character(
actionLink(
inputId = inputId, label = 'Show details',
onclick = sprintf("Shiny.setInputValue(id = 'CRM.ID_click', value = %s);", CRM.name))),
by = inputId][, inputId := NULL]
TableIsoCompCRM <- reactive({
# Nice solution from ismirsehregal https://stackoverflow.com/a/70763580/7612904
{DT <- copy(IsoCompCRM())
setDT(DT)
DT[, inputId := paste0("CRM.ID_input_", seq_len(.N))][
, CRM.ID_links := as.character(
actionLink(
inputId = inputId, label = 'Show details',
onclick = sprintf("Shiny.setInputValue(id = 'CRM.ID_click', value = %s);", CRM.name))),
by = inputId][, inputId := NULL]
}
sanitize.text.function = function(x){x}})
TableIsoCompCRM()
TableIsoCompCRM
runApp()
input$CRM.ID_click
input$CRM.ID_click
runApp()
CRM.ID_click
input$CRM.ID_click
runApp()
input$CRM.ID_click
runApp()
runApp()
shiny::runApp()
runApp()
input$CRM.ID_input_7
runApp()
Shiny.setInputValue
runApp()
input$CRM.ID_click
input$`SRM 981`
input$SlctdCRM.name
runApp()
runApp()
runApp()
input$SelectedCRM
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
ShowTable <- INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]})
ShowTable <- INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
ShowTable <- INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("CRM.name", "Lot", "Producer", "Description")]
ShowTable
paste(ShowTable$CRM.name, ShowTable$Lot, sep = '\n')
paste(ShowTable$CRM.name, ShowTable$Lot, sep = '/n')
cat(ShowTable$CRM.name, ShowTable$Lot, sep = '/n')
cat(ShowTable$CRM.name, ShowTable$Lot, sep = '\n')
paste(ShowTable$CRM.name, ShowTable$Lot, sep = '\n')
cat(paste(ShowTable$CRM.name, ShowTable$Lot, sep = '\n'))
paste(ShowTable$CRM.name, ShowTable$Lot, sep = ', ')
INITI_IsoCompCRM_DataIR
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$b(input$SelectedCRM)
tags$b('input$SelectedCRM')
runApp()
INITI_IsoCompCRM_Info
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
INITI_IsoCompCRM_Info
runApp()
INITI_IsoCompCRM_Info[INITI_IsoCompCRM_Info$CRM.name == input$SelectedCRM]
INITI_IsoCompCRM_Info[INITI_IsoCompCRM_Info$CRM.name == input$SelectedCRM, ]
Data <- INITI_IsoCompCRM_Info[INITI_IsoCompCRM_Info$CRM.name == input$SelectedCRM, ]
Data$Producer
Data$CRM.name
Data$Description
runApp()
runApp()
INITI_CRMproducers
runApp()
runApp()
Data <- INITI_IsoCompCRM_Info[INITI_IsoCompCRM_Info$CRM.name == input$SelectedCRM, ]
Data
Producer <- INITI_CRMproducers[INITI_CRMproducers$Producer == Data$Producer, ]
Producer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
INITI_IsoCompCRM_DataIR
DT <- copy(INITI_IsoCompCRM_DataIR[
, c('CRM.name', 'Isotopic.ratio', 'Value', 'Uncertainty', 'UncertType', 'k.factor')])
DT
DT <- copy(INITI_IsoCompCRM_DataIR[CRM.name == input$SelectedCRM
, c('CRM.name', 'Isotopic.ratio', 'Value', 'Uncertainty', 'UncertType', 'k.factor')])
INITI_IsoCompCRM_DataIR[
INITI_IsoCompCRM_DataIR$CRM.name == input$SelectedCRM,
c('Isotopic.ratio', 'Value', 'Uncertainty', 'UncertType', 'k.factor')]
runApp()
runApp()
runApp()
INITI_IsoCompCRM_Info
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("Producer", "CRM.name", "Lot", "Description")]
IsoCompCRM()
Table_IsoCompCRM_List <- reactive({
# Nice solution adapted from ismirsehregal https://stackoverflow.com/a/70763580/7612904
DT <- copy(IsoCompCRM())
setDT(DT)
DT[, inputId := CRM.name][#paste0("CRM.ID_input_", seq_len(.N))][
, Details := as.character(
actionLink(
inputId = session$ns(inputId), label = 'Show details',
onclick = sprintf(paste0("Shiny.setInputValue(id = '", id, "-SelectedCRM', value = '", inputId, "');")))),
by = inputId][, inputId := NULL]
})
id
runApp()
INITI_MatrixCRM_Info
INITI_MatrixCRM_DataIR
INITI_MatrixCRM_DataIR[INITI_MatrixCRM_DataIR$Element == tolower(SelectedElem()), ]
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE), ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
CRMsInfoTable
CRMsDataTable
CRMsInfoTable
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE),
c("Producer", "CRM.name", "Lot", "Description")]
nrow(CRMsInfoTable())
nrow(CRMsInfoTable) >= 1
gnrlClss = 'List_MatrixCRM'
DT <- copy(CRMsInfoTable)
DT
setDT(DT)
DT
id
runApp()
runApp()
SelectedElem = SelectedElem
SelectedElem
SelectedElem()
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE), ]
INITI_MatrixCRM_DataIR[INITI_MatrixCRM_DataIR$Element == tolower(SelectedElem()), ]
Table_CRM_List
Table_CRM_List()
UIIsoCompCRM()
runApp()
runApp()
CRMsInfoTable
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE), ]
SelectedElem()
req(SelectedElem())
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
CRMsInfoTable
INITI_MatrixCRM_Info[grep(tolower(SelectedElem()), INITI_MatrixCRM_Info$Elements, value = FALSE), ]
runApp()
uiOutput(ns('brwz'))
UI_CRM_List()
CRMsInfoTable
nrow(CRMsInfoTable) >= 1
tableOutput(session$ns('Table_CRM_List'))
ElmntToPrnt <- ifelse(nrow(CRMsInfoTable) >= 1, tableOutput(session$ns('Table_CRM_List')), NoInfo())
ElmntToPrnt
runApp()
input$SelectedCRM
input$`SRM 610`
id
Table_CRM_List
Table_CRM_List()
runApp()
runApp()
runApp()
CRMsDataTable
input$SelectedCRM
INITI_CalibraCRM_DataIR
INITI_IsoCompCRM_DataIR
CRMsInfoTable[CRMsInfoTable$CRM.name == input$SelectedCRM, ]
IndivData <- CRMsInfoTable[CRMsInfoTable$CRM.name == input$SelectedCRM, ]
CRMproducers[CRMproducers$Producer == IndivData$Producer, ]
CRMproducers = INITI_CRMproducers
MeasuReports = INITI_MeasuReports
IndivData <- CRMsInfoTable[CRMsInfoTable$CRM.name == input$SelectedCRM, ]
Producer  <- CRMproducers[CRMproducers$Producer == IndivData$Producer, ]
crmSummary(Producer = Producer, Data = Data, key = key)
crmSummary <- function(Producer, Data, key) {
Info <- HTML(paste0(
'<table class="tg""><tbody>
<tr><td class="tg-field">Producer:</td>
<td class="tg-value"><b>', Data$Producer, '</b></td></tr>
<tr"><td class="tg-field"> </td>
<td class="tg-value"><a href="', Producer$URL, '" target=_blank">', Producer$ProducerFullName, '</a></td></tr>
<tr style="height: 10px !important;"><td colspan="2"></td></tr>
<tr><th class="tg-field">CRM name:</th>
<th class="tg-value">', Data$CRM.name, '</th></tr>
<tr><th class="tg-field">Description:</th>
<th class="tg-value">', Data$Description, '</th></tr>
<tr><th class="tg-field">Presentation:</th>
<th class="tg-value">', Data$Presentation, '</th></tr>
<tr><td class="tg-field">Lot:</td>
<td class="tg-value">', Data$Lot, '</td></tr>
<tr><td class="tg-field">URL:</td>
<td class="tg-0lax"> <a href="', Data$URL, '" target=_blank">', Data$URL, '</a></td></tr>
</tbody></table>'))
return(Info)
}
ifelse(FALSE, 0)
ifelse(FALSE, 0, '')
MeasuReports[MeasuReports$Report.DOI == IndivData$Report.DOI, ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
CRMsInfoTable[CRMsInfoTable$CRM.name == input$SelectedCRM, ]
input$SelectedCRM
CRMsInfoTable$CRM.name
CRMsInfoTable
CRMsInfoTable
CRMsDataTable
INITI_IsoCompCRM_Info
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
id
id2
CRMsInfoTable
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
CRMsInfoTable = INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
CRMsInfoTable
runApp()
runApp()
runApp()
input$SelectedCRM
input$SelectedCRM
OldSelectedCRM <- reactiveVal('')
OldSelectedCRM
OldSelectedCRM()
input$SelectedCRM != OldSelectedCRM()
OldSelectedCRM(input$SelectedCRM)
OldSelectedCRM()
runApp()
OldSelectedCRM()
input$SelectedCRM
input$SelectedCRM != OldSelectedCRM()
OldSelectedCRM()
input$SelectedCRM
runApp()
runApp('~/MdlWhtnMdlJS')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library((DT))
library(DT)
install.packages(DT)
install.packages('DT')
renderDataTable
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
SelectedElem
SelectedElem()
is.null(SelectedElem())
runApp()
runApp()
runApp()
NoElement()
NoElement
input$AcLnk_MatrixCRM
input$AcLnk_CalibraCRM
input$AcLnk_IsoCompCRM
c(input$AcLnk_MatrixCRM, input$AcLnk_CalibraCRM, input$AcLnk_IsoCompCRM)
is.null(SelectedElem)
(SelectedElem)
is.null(SelectedElem())
runApp()
runApp()
runApp()
runApp()
IUPAC_Table
()
IUPAC_Table()
CIAAW_NatIsotAbunFtnt
ciaaw.mass.2016
ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_CIAAW()]
IUPAC_CIAAW
IUPAC_Table()
IUPAC_Table()$Isotope
ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Table()$Isotope, ]
isotopes()
isotopes()[, 1:2]
ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Table()$Isotope, 3:4]
as.character(ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Table()$Isotope, 3:4])
apply(ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Table()$Isotope, 3:4], 2, as.character)
IUPAC_Abun <- isotopes()[, 1:2]
IUPAC_Mass <- apply(ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Abun()$Isotope, 3:4], 2, as.character)
IUPAC_Mass <- apply(ciaaw.mass.2016[ciaaw.mass.2016$isotope %in% IUPAC_Abun$Isotope, 3:4], 2, as.character)
IUPAC_Table <- cbind(IUPAC_Abun, IUPAC_Mass)
IUPAC_Table
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
