shiny::runApp()
runApp()
runApp()
runApp()
setNames(c(paste0(INITI_CRMproducers$Producer, ', ', INITI_CRMproducers$ProducerFullName), 'Other ...'),
c(INITI_CRMproducers$Producer, 'Other'))
runApp()
runApp()
runApp()
runApp()
tags$li
tags$lib <- function(x) return(tags$li(tags$b(x)))
tags$lib('asd')
tags$lib <- function(x) return(tags$b(tags$li(x)))
tags$lib('asd')
runApp()
runApp()
input$Producer
runApp()
runApp()
runApp()
runApp()
input$Producer
input$Producer != ''
input$Producer != '' && input$Producer != 'Other'
INITI_CRMproducers
colnames(INITI_CRMproducers)
colnames(INITI_CRMproducers)
runApp()
runApp()
runApp()
shiny::runApp()
colnames(INITI_CRMproducers)
install.packages(‘countrycode’)
install.packages('countrycode')
library(countrycode)
countryname()
countrycode::codelist
countrycode::codelist$country.name.en
countrycode::codelist$country.name.en[257]
countrycode::codelist$country.name.en[257] <- 'Türkiye'
countries <- countrycode::codelist$country.name.en
countries[257] <- 'Türkiye'
countries[257]
selectizeInput(session$ns(field[4]), label = 'Country', choices = countries,
placeholder = '(English name)',
options = list(placeholder = 'Write or select an option below',
onInitialize = I('function() { this.setValue(""); }')))
selectizeInput(session$ns(field[4]), label = 'Country', choices = countries,
options = list(placeholder = 'Write or select an option below',
onInitialize = I('function() { this.setValue(""); }')))
selectizeInput('sa', label = 'Country', choices = countries,
options = list(placeholder = 'Write or select an option below',
onInitialize = I('function() { this.setValue(""); }')))
field
colnames(INITI_CRMproducers)
countrycode('Colombia')
countrycode('Colombia','country.name', 'iso2c')
countrycode('Türkiye','country.name', 'iso2c')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
actionButton("show", "Show Modal")
)
server <- shinyServer(function(input, output, session) {
observeEvent(input$show, {
showModal(
modalDialog(
"some messsage", title = "modal", footer = actionButton("confirm", "Close")
)
)
})
observeEvent(input$confirm, {
showModal(
modalDialog(
"are you sure?",
footer = tagList(
actionButton("yes", "Yes"),
modalButton("No")
)
)
)
})
observeEvent(input$yes, {
removeModal()
# do something after user confirmation
})
})
shinyApp(ui, server)
runApp()
field
is.null.empty()
fieldsCrmProd[1]
runApp()
runApp()
closeModal
runApp()
Reqfield
ReqField
runApp()
input$fieldsCrmProd[1]
fieldsCrmProd[1]
input$Producer
input$Producer
are.null.empty(c(input$Producer))
c(input$Producer)
fieldsCrmProd
are.null.empty(c(input$Producer, input$ProducerFullName, input$Country, input$URL))
runApp()
runApp()
output$BadNewProducer
renderUI(tags$div(tags$b(input$Producer), ', ',
tags$a(input$ProducerFullName, href = input$URL, target = '_blank'))
)
tags$div(tags$b(input$Producer), ', ',
tags$a(input$ProducerFullName, href = input$URL, target = '_blank'))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$cancelNewProducer
updateSelectInput(session, inputId = session$ns('SelectProducer'), selected = '')
I
runApp()
runApp()
I('function() { this.setValue(""); }')
runApp()
runApp()
input$CRM_type
input$SelectedProducer
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
input$SelectedProducer
runApp()
runApp()
shiny::runApp()
CRMproducers
CRMproducers
CRMsInfoTable$CRM.name
CRMsInfoTable
CRMsInfoTable
SelectedElem()
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
CRMsInfoTable
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
INITI_IsoCompCRM_DataIR[INITI_IsoCompCRM_DataIR$Element == tolower(SelectedElem()), ]
SelectedElem()
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
CRMsInfoTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
UploadProduStudyUI('Producer', key = 'Producer')
runApp()
runApp()
output$brwz
restartProdList
runApp()
input$SelectedProducer
NewProdInfo()
runApp()
Producer
Producer()
runApp()
shiny::runApp()
INITI_MeasRepoAuth <- read.csv(file ='www/IsotopicData/RAW_0_MeasurementReportsAuthors.csv')
INITI_MeasRepoAuth
runApp()
MRCsICDB <- RMySQL::dbConnect( ## Hosted freely by https://www.freesqldatabase.com/account/ (5Mb limit)
RMySQL::MySQL(), user = 'sql9599488', password = 'PHsEvvEBuY',
dbname = 'sql9599488', host = 'sql9.freesqldatabase.com'
)
# Following line will delete all tables
####for (i in dbListTables(MRCsICDB)) RMySQL::dbSendQuery(MRCsICDB, paste0("DROP TABLE ", i))
summary(MRCsICDB)
dbListTables(MRCsICDB)
for (i in dbListTables(MRCsICDB)) RMySQL::dbSendQuery(MRCsICDB, paste0("DROP TABLE ", i))
dbListTables(MRCsICDB)
source('www/IsotopicData/01_CIAAW_WebPageRvesting.R')
source('www/IsotopicData/02_INITIAL_DataTableConstruction.R')
dbWriteTable(conn = MRCsICDB, name = 'CIAAW_NatIsotAbunTable', value = CIAAW_NatIsotAbunTable)
dbWriteTable(conn = MRCsICDB, name = 'CIAAW_NatIsotAbunFtnts', value = CIAAW_NatIsotAbunFtnts)
dbWriteTable(conn = MRCsICDB, name = 'CIAAW_IsotopesMass2016', value = CIAAWconsensus::ciaaw.mass.2016)
dbWriteTable(conn = MRCsICDB, name = 'CRMproducers', value = INITI_CRMproducers)
dbWriteTable(conn = MRCsICDB, name = 'MeasuReports', value = INITI_MeasuReports)
dbWriteTable(conn = MRCsICDB, name = 'MeasRepoAuth', value = INITI_MeasRepoAuth)
dbWriteTable(conn = MRCsICDB, name = 'IsoCompCRM_Info', value = INITI_IsoCompCRM_Info)
dbWriteTable(conn = MRCsICDB, name = 'IsoCompCRM_DataIR', value = INITI_IsoCompCRM_DataIR)
dbWriteTable(conn = MRCsICDB, name = 'IsoCompCRM_DataAbundances', value = INITI_IsoCompCRM_DataAb)
dbWriteTable(conn = MRCsICDB, name = 'CalibraCRM_Info', value = INITI_CalibraCRM_Info)
dbWriteTable(conn = MRCsICDB, name = 'CalibraCRM_DataIR', value = INITI_CalibraCRM_DataIR)
dbWriteTable(conn = MRCsICDB, name = 'MatrixCRM_Info', value = INITI_MatrixCRM_Info)
dbWriteTable(conn = MRCsICDB, name = 'MatrixCRM_DataIR', value = INITI_MatrixCRM_DataIR)
dbListTables(MRCsICDB)
MRCsICDB <- RMySQL::dbConnect( ## Hosted freely by https://www.freesqldatabase.com/account/ (5Mb limit)
RMySQL::MySQL(), user = 'sql9599488', password = 'PHsEvvEBuY',
dbname = 'sql9599488', host = 'sql9.freesqldatabase.com'
)
MRCsICDB
# source('www/IsotopicData/01_CIAAW_WebPageRvesting.R')
# source('www/IsotopicData/02_INITIAL_DataTableConstruction.R')
GenericPeriodicTable <- read.csv(file = 'www/IsotopicData/RAW_GenericPeriodicTable.csv')
MRCsICDB <- RMySQL::dbConnect( ## Hosted freely by https://www.freesqldatabase.com/account/ (5Mb limit)
RMySQL::MySQL(), user = 'sql9599488', password = 'PHsEvvEBuY',
dbname = 'sql9599488', host = 'sql9.freesqldatabase.com')
runApp()
runApp()
runApp()
SelectedElem()
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
SelectedElem
SelectedElem()
SelectedElem()
CRMsInfoTable
IsoCompCRM_DataIR
SelectedElem()
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
INITI_IsoCompCRM_Info[grep(tolower(SelectedElem()), INITI_IsoCompCRM_Info$Elements, value = FALSE), ]
IsoCompCRM_Info
CRMsInfoTable
runApp()
runApp()
runApp()
